name: Build and Push to DockerHub

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      note:
        description: 'Notes'
        required: false
        default: 'Manual trigger'

env:
  REGISTRY: docker.io
  ACCOUNT: pcloud

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      packages: write
      # to upload sarif files
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Testing
        run: ./mvnw test

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.ACCOUNT }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.ACCOUNT }}/simple-springboot-app
          flavor: |
            latest=auto
            prefix=
            suffix=
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker image
        run: | 
            ./mvnw clean compile jib:build \
            -Djib.to.image=${{ env.ACCOUNT }}/simple-springboot-app
#            -Djib.to.auth.username="pcloud" \
#            -Djib.to.auth.password="${{ secrets.DOCKER_TOKEN }}"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
#          image-ref: ${{ steps.meta.outputs.tags }}
          image-ref: latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'